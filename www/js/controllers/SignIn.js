( function ( ) {    'use strict';    /**     * @ngdoc function     * @name app.controller:SignIn     * @author ALEXANDER GUEVARA http://arkeas.com     * @description     * # SignIn     */    angular.module('app.signin', [ ] );    angular.module( 'app.signin' ).controller( 'SignIn', [ '$scope', 'ApiService', '$location', '$rootScope' , '$timeout', SignIn ] );    function SignIn( $scope, ApiService, $location, $rootScope, $timeout ) {        var vm = this;                vm.loading = false;        vm.error = false;        vm.errorPwd = false;        // Testing only, must be commented        /*        vm.data = {            uid: 'alexander',            pwd: 'Alexander@'        };        */        // Password has to be 8-12 characters long        // Has to include Capital, lower case, and one of the following symbols: %#*&!@        // Cannot have more than 3 letters together (i.e. "Abe4" is OK, but "Abig!" is not)        // (?=.*[a-z]): At least one lower case character        // (?=.*[A-Z]): At least one upper case character        // (?=.*[%#\*&!@]): At least one of the following: %#*&!@        // (?![[:alpha:]]\1{3}) <<< This is an attempt to validate consecutive characters in RegEx but         // Not too much time left        vm.regex = new RegExp( "^(?=.*[a-z])(?=.*[A-Z])(?=.*[%#\*&!@])(?=.{8,12})" );        vm.signin = signin;        vm.pwdChanged = pwdChanged;        init( );                function init( ) {            // this is just to emulate the status of the user after signed in            $rootScope.signedIn = false;        };            function pwdChanged( ) {            if ( vm.data.pwd == undefined ) return;            // It has already passed RegEX testing            // Now Validate > Cannot have more than 3 letters together (i.e. "Abe4" is OK, but "Abig!" is not)            var regexAlpha = new RegExp( "^[A-Za-z]$" );            var alphaCounter = 0;            vm.data.pwd.split( '' ).forEach( function( character ) {                // If more than 3 characters in a row then no more validations needed                if ( alphaCounter > 3 ) return;                //If character is a alpha then validate the next one till maximum 3                if ( regexAlpha.test( character ) ) {                    alphaCounter++;                } else {                    // If does not match then counter goes back to zero                    alphaCounter = 0;                }                // If we have more than 3 characters in a row then the password is not valid                if ( alphaCounter > 3 ) {                    vm.msg = '&#9679; The password Cannot have more than 3 letters together (i.e. "Abe4" is OK, but "Abig!" is not)';                    vm.error = true;                    vm.errorPwd = true;                }            });            // Everything all right            if ( alphaCounter <= 3 ) {                vm.msg = '';                vm.error = false;                vm.errorPwd = false;            }        }            // When signin the just make a request to the API, in this case, a Mockup one.        function signin( ) {            if ( !vm.loading ) {                vm.loading = true;                // This would trigger the API request                var response = ApiService.post( 'signin', vm.data );                // A couple of seconds to emulate an API request. Just for fun!                $timeout( function( ) {                    vm.msg = response.msg;                    vm.error = response.error;                    if ( !response.error ) {                        vm.data = response.data;                        $rootScope.signedIn = true;                        $rootScope.uid = vm.data.uid;                        $location.path( '/tabs/info' );                    }                    vm.loading = false;                },  2000 );            }        };    }})();